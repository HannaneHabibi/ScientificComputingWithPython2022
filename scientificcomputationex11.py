# -*- coding: utf-8 -*-
"""ScientificcomputationEx11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pZa-1LSKpVTNCMVV91zT_FelabbqPfZm
"""

import numpy as np
import math
from scipy import stats
import matplotlib.pyplot as plt

def p1(t,tau = 183.12):
    return 1-2**(-(t)/(tau))

Tl = []
lead = []
Tla = 1000
leadatom = 0

for i in range(1,1001):
    if (np.random.uniform(0,1) < p1(i)):
        Tla -= 1
        leadatom += 1
    Tl.append(Tla)
    lead.append(leadatom)
    
plt.plot(Tl,label="Tl")
plt.plot(lead,label="Pb")
plt.xlabel("Time")
plt.ylabel("Num of atoms")
plt.legend()
plt.show()

def p2(x,tau = 183.12):
    t = -tau*np.log2(1-x)
    return t

u = np.random.random(10000)
atom = p2(u, tau = 183.12)

time = np.arange(0,1000,1) 

plt.figure()
plt.hist(atom, bins=90)
plt.axis([0, 1000, 0 ,1000])
plt.xlabel('Time')
plt.ylabel('Num of atoms')
plt.show()

"""Exercise 2"""

def f(x):
    return (np.sin(1/(1-x)))**2

N = 100000
x=np.linspace(0,2,N)
plt.plot(x,f(x))
z = np.zeros(10)
x = np.zeros(N)
y = np.zeros(N)
a=-1
b=1
z2 = ((b-a)*np.sum(y))/N

count=0
for i in range(N):
    x=2*np.random.random() 
    y=np.random.random()
    if y<f(x): 
        count+=1
z1 = 2 * count / N


for k in range(10):
    count = 0
    for i in range(N):
        x=2*np.random.random()
        y=np.random.random()
        if y<f(x): 
            count += 1   
    z[k] = 2*count/N

mean = np.mean(z)
std = np.std(z)

print('Hit/Miss Method :', z1,'\nMean = ', mean, '\nStandard Deviation = ', std)