# -*- coding: utf-8 -*-
"""ScientificcomputationEx10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DrgI5AKTtinGd-dbW8WnRky7IZJ3y5JS

Exercise1
"""

from scipy.stats import poisson
import numpy as np
import matplotlib as plt
from math import sqrt, pi, erf
from scipy import stats
import matplotlib.pyplot as plt
from scipy import optimize
import pandas as pd
from scipy.optimize import curve_fit

num = 15
mu = 6.3
sigma = np.sqrt(mu)

xs = np.linspace(-5 ,5 , 1000)
ts = stats.norm.pdf(xs)
plt.plot(xs, ts)
plt.fill_between(xs, ts, where=np.abs(xs) > np.abs((num - mu)/sigma))
plt.axvline(-(num - mu)/sigma, color='red')
plt.axvline((num - mu)/sigma, color='black')
plt.title("Test statistics")
plt.xlabel("x")
print("Z =", (num - mu)/sigma)

cs = stats.norm.cdf(xs)
plt.plot(xs, cs)
plt.axvline(((num - mu)/sigma),color='r')
plt.title("Test statistics CDF")
plt.xlabel("x")
print("p-value =",  (1. - stats.norm.cdf((num - mu)/sigma)))

"""Exercise 3"""

maxtempreture = np.array([17,  19,  21,  28,  33,  38, 37,  37,  31,  23,  19,  18])
mintempreture = np.array([-62, -59, -56, -46, -32, -18, -9, -13, -25, -46, -52, -58])

month = np.arange(12)
plt.figure(figsize=(10,8))
plt.plot(month, maxtempreture, 'ro', label='Maximum Tempreture')
plt.plot(month, mintempreture, 'bo', label='Minimum Tempreture')
plt.ylabel('Temperature')
plt.xlabel('Month')
plt.legend(loc='best')

temps = lambda t, a, b, c, d: (a * np.sin(b*np.pi*(t + d)/t.max()) + c)

popt_max, pcov_max = optimize.curve_fit(temps, month,maxtempreture, [20,1,20,0])

popt_min, pcov_min = optimize.curve_fit(temps, month, mintempreture, [50,1,-60,0])

days = np.linspace(0, 12, num=365)

plt.figure(figsize=(10, 8))
plt.plot(month, maxtempreture, 'yo')
plt.plot(days, temps(days, *popt_max), 'r-', label='fitted function maximum')
plt.plot(month, mintempreture, 'yo')
plt.plot(days, temps(days, *popt_min), 'b-', label='fitted function minimum')
plt.xlabel('Month')
plt.ylabel('Temperature')
plt.legend(loc='best')
plt.show()


print("time offset 1= %.2f +- %.2f" % (popt_max[3], np.sqrt(pcov_max[3,3]))) 
print("time offset 2= %.2f +- %.2f" % (popt_min[3], np.sqrt(pcov_min[3,3])))